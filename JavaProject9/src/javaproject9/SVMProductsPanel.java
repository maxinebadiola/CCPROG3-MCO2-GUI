/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package javaproject9;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ERICA
 */
public class SVMProductsPanel extends javax.swing.JPanel {

    private Special special;
    private ArrayList<Product> selectedComboProducts = new ArrayList<>();

    /**
     * Creates new form ProductsPanel
     *
     * @param special
     */
    public SVMProductsPanel(Special special) {
        this.special = special;
        initComponents();
        generateProductButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 486,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE));
    }// </editor-fold>//GEN-END:initComponents

    private void generateProductButtons() {
        ArrayList<Slot> slotList = special.getSlotList();
        selectedComboProducts.add(slotList.get(0).getProduct());

        removeAll();
        JPanel productPanel = new JPanel();
        productPanel.setLayout(new GridBagLayout());

        productPanel.setBackground(new Color(255, 255, 204));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;

        JLabel yogurt = new JLabel(slotList.get(0).getProduct().getName());
        gbc.gridx = 0;
        productPanel.add(yogurt, gbc);

        JLabel yogurtStock = new JLabel("Stock: " + slotList.get(0).getStock());
            gbc.gridx = 4;
            productPanel.add(yogurtStock, gbc);

            JLabel yogurtPrice = new JLabel("Price: PHP " + slotList.get(0).getProduct().getPrice());
            gbc.gridx = 5;
            productPanel.add(yogurtPrice, gbc);

            JLabel yogurtCalories = new JLabel("Calories: " + slotList.get(0).getProduct().getCalories());
            gbc.gridx = 6;
            productPanel.add(yogurtCalories, gbc);

        gbc.gridy++;

        for (int i = 1; i < slotList.size(); i++) {
            Product product = slotList.get(i).getProduct();

            JLabel nameLabel = new JLabel(product.getName());
            gbc.gridx = 0;
            productPanel.add(nameLabel, gbc);

            JLabel countLabel = new JLabel("(Count: 0)");
            gbc.gridx = 1;
            productPanel.add(countLabel, gbc);

            JButton incrementButton = new JButton("+");
            gbc.gridx = 2;
            productPanel.add(incrementButton, gbc);

            JButton decrementButton = new JButton("-");
            gbc.gridx = 3;
            productPanel.add(decrementButton, gbc);

            int stock = slotList.get(i).getStock();

            incrementButton.addActionListener(e -> {
                int count = getProductCount(product);

                if (count < stock) {
                    count++;
                    updateProductCount(product, count);
                    countLabel.setText("(Count: " + count + ")");
                } else {
                    JOptionPane.showMessageDialog(this, "Stock limit reached.", "Invalid Count",
                            JOptionPane.ERROR_MESSAGE);
                }
            });

            decrementButton.addActionListener(e -> {
                int count = getProductCount(product);
                if (count > 0) {
                    count--;
                    updateProductCount(product, count);
                    countLabel.setText("(Count: " + count + ")");
                }
            });

            JLabel stockLabel = new JLabel("Stock: " + slotList.get(i).getStock());
            gbc.gridx = 4;
            productPanel.add(stockLabel, gbc);

            JLabel priceLabel = new JLabel("Price: PHP " + product.getPrice());
            gbc.gridx = 5;
            productPanel.add(priceLabel, gbc);

            JLabel caloriesLabel = new JLabel("Calories: " + product.getCalories());
            gbc.gridx = 6;
            productPanel.add(caloriesLabel, gbc);

            gbc.gridy++;
        }

        jPanel1.add(productPanel);

        int preferredHeight = gbc.gridy * 30 + 10;
        setPreferredSize(new Dimension(getPreferredSize().width, preferredHeight));

        revalidate();
        repaint();
    }

    private int getProductCount(Product product) {
        int count = 0;
        for (Product selectedProduct : selectedComboProducts) {
            if (selectedProduct.equals(product)) {
                count++;
            }
        }
        return count;
    }

    private void updateProductCount(Product product, int count) {
        for (int i = selectedComboProducts.size() - 1; i >= 0; i--) {
            if (selectedComboProducts.get(i).equals(product)) {
                selectedComboProducts.remove(i);
            }
        }

        for (int i = 0; i < count; i++) {
            selectedComboProducts.add(product);
        }
    }

    public void resetCountLabels() {
        selectedComboProducts.clear();
        for (Component component : jPanel1.getComponents()) {
            if (component instanceof JPanel) {
                for (Component subComponent : ((JPanel) component).getComponents()) {
                    if (subComponent instanceof JLabel) {
                        JLabel label = (JLabel) subComponent;
                        String labelText = label.getText();
                        if (labelText.startsWith("(Count: ")) {
                            label.setText("(Count: 0)");
                        }
                    }
                }
            }
        }
    }

    public ArrayList<Product> getSelectedComboProducts() {
        return selectedComboProducts;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
